{"ast":null,"code":"var _jsxFileName = \"/home/asus/Documents/suman/react/textutils/src/components/Textform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Textform(props) {\n  _s();\n\n  const handleUpClick = event => {\n    setText(text.toUpperCase());\n  };\n\n  const handleLoClick = event => {\n    setText(text.toLowerCase());\n  };\n\n  const handleOnChange = event => {\n    setText(event.target.value);\n  };\n\n  const handleUpCount = event => {\n    let count = 0;\n    let wordcnt = 0;\n    wordcnt = text.split(' ').length;\n\n    for (let i = 0; i < text.length; i++) {\n      count += 1;\n    }\n\n    if (text === '') {\n      wordcnt = 0;\n    } else if (text.endsWith(' ')) {\n      wordcnt--;\n    }\n\n    return [count, wordcnt];\n  };\n\n  const [text, setText] = useState('');\n  const [count, wordcnt] = handleUpCount();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: props.header\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          value: text,\n          onChange: handleOnChange,\n          id: \"exampleFormControlTextarea1\",\n          rows: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleUpClick,\n        children: \"Convert to uppercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-2\",\n        onClick: handleLoClick,\n        children: \"Convert to lowercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-2\",\n        onClick: handleDarkClick,\n        children: \"Darkmode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"my-2 \",\n        children: [count, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 38\n        }, this), \" and \", wordcnt, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 70\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Estimated time to read:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 12\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: [(count * 0.003).toFixed(1) < 1 ? 'less than a ' : (count * 0.003).toFixed(1), \" minute \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 43\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Textform, \"M8VhbSOru85VOsk7T2j5DvKRp+M=\");\n\n_c = Textform;\nTextform.prototype = {\n  header: PropTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Textform\");","map":{"version":3,"sources":["/home/asus/Documents/suman/react/textutils/src/components/Textform.js"],"names":["React","useState","PropTypes","Textform","props","handleUpClick","event","setText","text","toUpperCase","handleLoClick","toLowerCase","handleOnChange","target","value","handleUpCount","count","wordcnt","split","length","i","endsWith","header","handleDarkClick","toFixed","prototype","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport default function Textform(props) {\n    const handleUpClick = (event)=>{\n        setText(text.toUpperCase());\n    }\n    const handleLoClick = (event)=>{\n        setText(text.toLowerCase());\n    }\n    const handleOnChange = (event)=>{\n        setText(event.target.value)\n    }\n    const handleUpCount = (event) =>{\n        let count = 0;\n        let wordcnt = 0;\n        wordcnt = text.split(' ').length;\n        for(let i=0; i<text.length; i++){\n            count +=1;\n           \n        }\n        if(text === ''){\n            wordcnt =0;\n        }else if(text.endsWith(' ')){\n            wordcnt --;\n        }\n        return [count, wordcnt];\n    }\n    const [text, setText] = useState('');\n    const [count, wordcnt] = handleUpCount();\n    return (\n        <>\n        <div>\n            <h5>{props.header}</h5>\n        <div className=\"mb-3\">\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\n        </div>\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleDarkClick}>Darkmode</button>\n        <p className='my-2 '>{count} <i>characters</i> and {wordcnt} <i>words</i></p>\n        <p><b>Estimated time to read:</b> <i>{(count * 0.003).toFixed(1) < 1 ? 'less than a ': (count*0.003).toFixed(1)} minute </i> </p>\n    </div>\n    <div>\n        <h5>Preview</h5>\n        <p>{text}</p>\n    </div>\n    </>\n  )\n}\n\nTextform.prototype = {\n    header: PropTypes.string.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}